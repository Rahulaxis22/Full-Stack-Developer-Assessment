 Add middleware for Token


 To add middleware for token authentication in a web application, you can follow these general steps:

1. Identify the framework or technology stack you're using for your web application (e.g., Express.js, Django, Ruby on Rails, etc.). 
   The implementation details may vary depending on the specific framework.

2. Generate or obtain a token for authentication. Tokens can be issued using various protocols like JSON Web Tokens (JWT), OAuth, or 
   custom token-based authentication mechanisms.

3. Set up a middleware function or module that will handle the token authentication process. Middleware functions intercept incoming 
   requests before they reach the actual route handlers and perform certain actions or checks.

4. In the middleware function, extract the token from the request. The token can typically be found in the request headers, query parameters,
   or in the request body, depending on how you choose to send it.

5. Verify and decode the token to ensure its authenticity and extract relevant information. If you're using JWT, you'll need to verify the signature 
    using the token's secret or public key, and then decode the token payload to obtain the necessary user or session information.

6. Perform any additional validation or checks based on your application's requirements. This may include checking the token's expiration, comparing 
     user roles or permissions, or querying a database to validate the token against stored user information.

7. If the token is valid, you can store the extracted information (e.g., user ID, roles) in the request object or any other relevant 
    location for later use within your application.

8. If the token is invalid or fails any validation checks, you can respond with an appropriate error message or status code, denying access 
       to the requested resource.

9. Apply the middleware to the appropriate routes or globally, depending on your desired authentication behavior. In most frameworks, you can 
     specify the middleware function in the application's route definitions or globally configure it to apply to all incoming requests.

10. Test the authentication flow thoroughly to ensure that the middleware functions as expected. Verify that authenticated requests are successful while 
    unauthorized requests are appropriately denied access.

// Import required dependencies
const express = require('express');
const jwt = require('jsonwebtoken');

// Create an instance of Express
const app = express();

// Define your secret key for token verification
const secretKey = 'your_secret_key';

// Middleware function for token authentication
function authenticateToken(req, res, next) {
  // Extract the token from the request headers
  const token = req.headers['authorization'];

  // Check if the token exists
  if (!token) {
    return res.status(401).json({ error: 'No token provided' });
  }

  // Verify and decode the token
  jwt.verify(token, secretKey, (err, decoded) => {
    if (err) {
      return res.status(403).json({ error: 'Failed to authenticate token' });
    }

    // Store the decoded information in the request object
    req.user = decoded;

    // Proceed to the next middleware or route handler
    next();
  });
}

// Example route requiring token authentication
app.get('/protected', authenticateToken, (req, res) => {
  // Access the authenticated user's information
  const userId = req.user.userId;
  // Perform actions specific to the protected route

  res.json({ message: 'Protected route accessed successfully', userId });
});

// Start the server
app.listen(3000, () => {
  console.log('Server started on port 3000');
});
